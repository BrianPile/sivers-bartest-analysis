
```{r}
#| label: setup
#| include: false

# TODO: add series resistance
rm(list = ls())

# load packages
library(tidyverse)
library(here)
library(devparext)
library(gt)

# set ggplot2 theme
theme_set(theme_bw())

# source EEVEE mask decoder
source("/Users/brianpile/POET Technologies Dropbox/Brian Pile/Brian Pile/R_scripts/POET LD maskset decoders/decode_eevee.R")

# source config file
source(here("config_info.R"))

# calibration constants
# TODO: put calibration constants inside config file?
CAL_FACTOR_Pf3 = config_info$CAL_FACTOR_Pf3
CAL_OFFSET_Lp3 = config_info$CAL_OFFSET_Lp3

# die geometry
DIE_WIDTH = 250
DIE_LENGTH = 950

# data for a circle
circleFun <- function(center = c(0,0), diameter = 1, npoints = 100){
    r = diameter / 2
    tt <- seq(0,2*pi,length.out = npoints)
    xx <- center[1] + r * cos(tt)
    yy <- center[2] + r * sin(tt)
    return(data.frame(x = xx, y = yy))
}
circ_dat = circleFun(diameter = 75000)
```

```{r}
#| label: load-data
#| eval: true

df_summary = data.table::fread(file = here("data/output", paste0(config_info$lotID, "_summary.csv"))) |> 
  as_tibble() |> 
  mutate(Pf3_cal = Pf3 * CAL_FACTOR_Pf3, .after = Pf3) |> 
  mutate(Lp3_cal = Lp3 + CAL_OFFSET_Lp3, .after = Lp3) |> 
  mutate(
    cellID = as.character(cellID),
    barID = as.character(barID)
  ) |>
  mutate(ldID = paste0(barID, dieID), .after = dieID) |> 
  decode_eevee()

# TODO: FIGURE OUT WHY this is even needed, why is NA happening???
df_summary = df_summary |> filter(!is.na(Lp3)) 

```

```{r}
#| label: wavelength-binning

# ELS wavelength plan
# TODO: can use cut function instead to do this? I tried, see below...
# df_wl_info = tribble(
#   ~CH,     ~WL_min,     ~WL_max,
#   0,       1567.13,     1570.4199999,
#   1,       1570.42,     1573.7099999,
#   2,       1573.71,     1577.0299999,
#   3,       1577.03,     1580.3499999,
#   4,       1580.35,     1583.69
# )
# 
# # coarse wavelength binning into "channels"
# df_summary = df_summary |> 
#   mutate(ch_bin = case_when(
#     Lp3_cal < df_wl_info[[1, "WL_min"]] ~ "too low",
#     between(Lp3_cal, df_wl_info[[1, "WL_min"]], df_wl_info[[1, "WL_max"]]) ~ "0",
#     between(Lp3_cal, df_wl_info[[2, "WL_min"]], df_wl_info[[2, "WL_max"]]) ~ "1",
#     between(Lp3_cal, df_wl_info[[3, "WL_min"]], df_wl_info[[3, "WL_max"]]) ~ "2",
#     between(Lp3_cal, df_wl_info[[4, "WL_min"]], df_wl_info[[4, "WL_max"]]) ~ "3",
#     between(Lp3_cal, df_wl_info[[5, "WL_min"]], df_wl_info[[5, "WL_max"]]) ~ "4",
#     Lp3_cal > df_wl_info[[4, "WL_max"]] ~ "too high",
#     .default = NA
#   ))

wl_ch_boundaries = c(1567.13, 1570.42, 1573.71, 1577.03, 1580.35, 1583.69)
df_summary = df_summary |> 
  mutate(
    ch_bin = cut(
      Lp3_cal,
      breaks = wl_ch_boundaries,
      labels = FALSE,
      include.lowest = TRUE,
      right = TRUE
    ) - 1,
    ch_bin = as.character(ch_bin)
  )




# fine wavelength binning into "sub bins" that span the entire wl range
c = 299792458 # speed of light (m/s)
n_bins = 7 # in order to have bin width in nm less than the channel spacing accuracy (+/- 0.5nm)
f_max = 191300 # GHz
f_min = 189300 # GHz
f_spacing = 400 # GHz
f_binwidth = f_spacing / n_bins
f_bin_boundaries = seq(f_min, f_max, f_binwidth)
wl_bin_boundaries = c/f_bin_boundaries

df_summary = df_summary |> 
  mutate(
    wl_sub_bin = cut(
      x = Lp3_cal,
      breaks = wl_bin_boundaries,
      labels = FALSE,
      include.lowest = TRUE
    )
  )

# Assign bin_id, which is a value A-G, for bins inside a given channel. A set of
# die then consists of one die per channel that have the same bin_id.
df_summary = df_summary |> 
  mutate(
    bin_id = LETTERS[(wl_sub_bin-1) %% 7 + 1]
  )

```


# Overview

## Process History

| Process                                             | Supplier | Comment                                          |
|--------------------------------|-------------|---------------------------|
| Epi wafer and fabrication up until z-stop           | Almae    | Phase-3 lot of three wafers                      |
| Wafer thinning and patterned backside metallization | Sivers   | Used Sivers own labeling characters and sequence |
| Cleaving, facet coating, and bar testing            | Sivers   | non-hermetic coatings                            |

## Known Issues

The following items regarding the wafer history should be noted.

1.  An oversight in the EEVEE mask design caused poor cleaving quality. Thick p-metal is located in the cleave streets resulting in irregular facets and also metal wrapping over the die edge into the facet region. This oversight caused significant processing challenges at both Almae and Sivers resulting in delays and unknown yield and reliability consequences. The mask has been revised to correct the issue.

2.  The wavelengths are blue-shifted from the design targets by about -3.5nm. This corresponds to a offset of approximately one channel in the intended 4-channel application. The impact to yield is that there are effectively no channel 4 devices available. A new bin for a channel 0 was created in order to harvest these die anyway.

## Calibration

The raw output power and wavelength data was calibrated based on previous comparison of POET CoC, Almae CoC, and Sivers bar test data. A calibration factor of `r CAL_FACTOR_Pf3` was applied to the output power at 400mA, and a calibration offset of `r CAL_OFFSET_Lp3`mW was added to the wavelength at 400mA. All analysis in this report is based on the calibrated data unless specifically noted otherwise.

# Yield

```{r}
#| label: yield-calculation

# pass criteria
# TODO: put pass criteria inside config file?
Ith_max = 25L
Pf3_min = 80L
# Vf3_max = 2.0
Vf3_max = 2.5  # making exception because CoC voltage looked normal and this crushes the yield otherwise
Vf3_min = 1.3
# SMSR3_min = 35L
SMSR3_min = 10L
# Lp3_min = 1570.06
Lp3_min = 1567.13 # assumes creating a CH0 is acceptable, normally this should be 1570.06
Lp3_max = 1583.69
kink_max = 30L

# pass/fail evaluation
df_summary = df_summary |>
  mutate(
    pf_Pf3 = case_when(
      Pf3_cal >= Pf3_min ~ TRUE,
      .default = FALSE
    ),
    pf_Ith = case_when(
      Ith1d <= Ith_max ~ TRUE,
      .default = FALSE
    ),
    # pf_Pf3 = case_when(
    #   Pf3_cal >= Pf3_min ~ TRUE,
    #   .default = FALSE
    # ),
    pf_Vf3 = case_when(
      between(Vf3, Vf3_min, Vf3_max) ~ TRUE,
      .default = FALSE
    ),
    pf_SMSR3 = case_when(
      SMSR3 >= SMSR3_min ~ TRUE,
      .default = FALSE
    ),
    pf_Lp3 = case_when(
      between(Lp3_cal, Lp3_min, Lp3_max) ~ TRUE,
      .default = FALSE
    ),
    pf_kink = case_when(
      abs(KINK) <= kink_max ~ TRUE,
      .default = FALSE
    ),
    pf_final = case_when(
      pf_Pf3 & pf_Vf3 & pf_Ith & pf_kink & pf_SMSR3 & pf_Lp3 ~ TRUE,
      .default = FALSE
    )
  )

# assign pass/fail codes
df_summary = df_summary |> 
  mutate(
    pf_code = case_when(
      pf_Pf3   == FALSE ~ "Pf",
      pf_Ith   == FALSE ~ "Ith",
      pf_Vf3   == FALSE ~ "Vf",
      pf_SMSR3 == FALSE ~ "SMSR",
      pf_Lp3   == FALSE ~ "Lp",
      pf_kink  == FALSE ~ "kink",
      pf_final == TRUE ~ "PASS",
      .default = "?"
    )
  )

# calculate individual parameter yields
df_yield = df_summary |> 
  group_by(waferID) |>
  summarize(
    n = n(),
    Pf3_fail_count = sum(!pf_Pf3),
    Pf3_yield_pct = round(100*(1 - Pf3_fail_count/n), 1),
    Vf3_fail_count = sum(!pf_Vf3),
    Vf3_yield_pct = round(100 * (1 - Vf3_fail_count/n), 1),
    Ith_fail_count = sum(!pf_Ith),
    Ith_yield_pct = round(100 * (1 - Ith_fail_count/n), 1),
    kink_fail_count = sum(!pf_kink),
    kink_yield_pct = round(100 * (1 - kink_fail_count/n), 1),
    SMSR3_fail_count = sum(!pf_SMSR3),
    SMSR3_yield_pct = round(100 * (1 - SMSR3_fail_count/n), 1),
    Lp3_fail_count = sum(!pf_Lp3),
    Lp3_yield_pct = round(100 * (1 - Lp3_fail_count/n), 1),
    fail_count = sum(!pf_final),
    total_pass_count = sum(pf_final),
    total_yield_pct = round(100 * (1 - fail_count/n), 1)
  )

```

```{r}
#| label: output-summary-data

fname = paste(
  sep = "-",
  "EEVEE",
  config_info$lotID,
  config_info$waferID,
  "summary-binned-data.csv"
  )

if (!file.exists(here("data/output", fname))) {
  message("saved the binned summary csv file!")
  data.table::fwrite(df_summary, file = here("data/output", fname))
} else {
  message("binned summary csv file already exists, did not save a new one.")
}

```

## summary

```{r}
#| label: yield-summary-table

# yield summary table
df_yield |> 
  select(waferID, n, fail_count, total_pass_count, total_yield_pct) |> 
  gt() |> 
  tab_header(
    title = "Chip-Level Yield Summary",
    subtitle = paste("Lot", config_info$lotID)
  ) |> 
  tab_stubhead(label = "Lot ID") |> 
  cols_label(
    waferID = "Wafer ID",
    fail_count = "Fail Count",
    total_pass_count = "Pass Count",
    total_yield_pct = "Yield (%)"
  ) |> 
  tab_options(
    table.width = pct(80)
  ) |> 
  tab_source_note(
    source_note = "Edge die failures have not been removed from this analysis"
  )

```

```{r}
#| label: channel-yield

df_summary |> 
  filter(pf_final) |> 
  summarize(
    .by = c(waferID, ch_bin),
    n = n()
  ) |> 
  filter(ch_bin %in% as.character(0:4)) |> 
  arrange(ch_bin) |> 
  pivot_wider(
    names_from = ch_bin,
    values_from = n,
    names_prefix = "CH"
  ) |> 
  gt() |> 
  tab_header(
    title = "Yielded Die Per Channel",
    subtitle = paste("Lot", config_info$lotID)
  ) |> 
  cols_label(
    waferID = "Wafer ID"
  ) |> 
  tab_options(
    table.width = pct(80)
  ) |> 
  tab_source_note(
    source_note = "Edge die failures have not been removed from this analysis"
  )

```

```{r}
#| label: wl-sets-yield

# Calculate the number of chips in each sub bin, then for each wl group find the
# channel with the minimum chip count. This value limits the number of die sets
# that can be picked for that wl group.

df_temp = df_summary |> 
  filter(
    pf_final,
    ch_bin %in% c("0", "1", "2", "3")
  ) |> 
  summarize(
    .by =   c(ch_bin, bin_id),
    n = n()
  ) |> 
  arrange(bin_id) |> 
  summarize(
    .by = bin_id,
    n_tot = sum(n),
    n_set_ideal = n_tot %/% 4,
    n_sets_actual = min(n)
  )
  
df_temp |> 
  rename("WL Set" = bin_id,
         n = n_tot,
         "Ideal Set Count" = n_set_ideal,
         "Yielded Set Count" = n_sets_actual) |> 
  gt() |> 
  tab_header(
    title = "Binned Die Set Counts",
    subtitle = paste("Lot", config_info$lotID)
  ) |> 
  tab_source_note(
    source_note = "The small quantity of CH4 die are ignored in this analysis"
  ) |> 
  tab_source_note(
    source_note = "Sets are comprised of die from CH0, CH1, CH2, aand CH3"
  ) |> 
  grand_summary_rows(
    columns = c(n, `Ideal Set Count`, `Yielded Set Count`),
    fns = list(
      total = ~ sum(.)
    )
  )

```

```{r}
#| label: binning-yield-summary

df_temp |> 
  summarize(
    n = sum(n_tot),
    n_matched     = sum(n_sets_actual) * 4,
    n_unmatched   = n - n_matched,
    n_sets_ideal  = n / 4,
    n_sets_actual = sum(n_sets_actual),
    binning_yield = round(100*n_matched/n, 1)
  ) |> 
  rename(
    "Matched Die Count"   = n_matched,
    "Unmatched Die Count" = n_unmatched,
    "Ideal Set Count"     = n_sets_ideal,
    "Actual Set Count"    = n_sets_actual,
    "Binning Yield (%)"   = binning_yield
  ) |> 
  gt() |> 
  tab_header(
    title = "Binning Yield Summary",
    subtitle = paste("Lot", config_info$lotID)
  ) |> 
  tab_source_note(
    source_note = "The small quantity of CH4 die are ignored in this analysis"
  ) |> 
  tab_source_note(
    source_note = "Sets are comprised of die from CH0, CH1, CH2, and CH3"
  )
  
```


## pass criteria

```{r}
#| label: pass-criteria-table

pf_criteria = tribble(
  ~no,  ~Parameter,                     ~Symbol,  ~Unit,   ~Minimum,     ~Maximum,
  1,    "Output Power",                 "Pf",     "mW",    Pf3_min,      NA,
  2,    "Threshold Current",            "Ith",    "mA",    NA,           Ith_max,
  3,    "Forward Voltage",              "Vf",     "V",     Vf3_min,      Vf3_max,
  4,    "Side Mode Suppression Ratio",  "SMSR",   "dB",    SMSR3_min,    NA,
  5,    "Peak Wavelength",              "Lp",     "nm",    Lp3_min,      Lp3_max,
  6,    "Kink Deviation",               "Kink",   "%",     NA,           kink_max
)

pf_criteria |>
  gt() |> 
  tab_header(
    title = "Pass Criteria"
  ) |> 
  sub_missing(
    columns = everything(),
    rows = everything(),
    missing_text = ""
  ) |> 
  cols_width(
    no ~ px(10),
  ) |>
  fmt_number(
    rows = c(3, 5),
    columns = -1,
    decimals = 2,
    use_seps = FALSE
  ) |> 
  tab_options(
    table.width = pct(80)
  ) |> 
  tab_source_note(
    source_note = "L-I-V and spectrum are measured using pulsed and CW current, respectively"
  ) |> 
  tab_source_note(
    source_note = "parameters are taken at 400mA, 50C"
  )

```

## pass rates

```{r}
#| label: pass-rates

df_yield |> 
  pivot_longer(-c(waferID, n)) |> 
  filter(str_detect(name, "pct")) |> 
  mutate(name = str_remove(name, "_yield_pct")) |> 
  ggplot(aes(x = fct_reorder(name, value, .desc = TRUE), y = value)) +
  geom_col() +
  geom_text(
    aes(label = paste0(round(value, 0), "%")),
    vjust = -0.5
  ) +
  coord_cartesian(ylim = c(0, 100)) +
  labs(
    title = "Percent of Chips Passing by Criteria Type",
    x = "Parameter",
    y = "(%)"
  )

```

## failure Pareto

```{r}
#| label: failure-pareto

d = df_summary |>
  filter(pf_code != "PASS") |> 
  summarize(
    .by = c(pf_code),
    n = n()
  ) |> 
  mutate(pcnt = 100 * n/sum(n))

d |>
  ggplot(aes(x = fct_reorder(pf_code, pcnt, .desc = TRUE), y = pcnt)) +
  geom_col() +
  geom_text(aes(label = paste0(round(pcnt), "%")), vjust = -0.5) +
  coord_cartesian(ylim = c(0, 100)) +
  labs(
    # title = "Percentage by First-Failed Criteria",
    title = "Pareto of First-Failed Criteria",
    x = NULL,
    y = "(%)",
    caption = paste(sep = "\n",
                    "Notes:",
                    "1. The order in which the criteria are checked affects the plotting result.")
  ) +
  theme(plot.caption = element_text(hjust = 0))

```

```{r}
#| label: wl-bin-tally
#| eval: true

df_summary |> 
  filter(pf_final == TRUE) |>
  # filter(SMSR3 >= 35) |> 
  summarize(
    .by = c(ch_bin, wl_sub_bin, bin_id),
    n = n()
  ) |> 
  ggplot(aes(x = wl_sub_bin, y = n, fill = ch_bin)) +
  geom_col() +
  geom_text(aes(label = n), vjust = -0.5, size = 2) +
  # coord_cartesian(ylim = c(0, 3000)) +
  labs(
    title = "Wavelength Bin Counts",
    # x = "sub bin"
  )

```

# Parametric Data

## Summary

```{r}
#| label: summary-stats

df_stats = df_summary |> 
  # filter(pf_final == TRUE) |>
  select(Ith1d, Pf3_cal, Vf3, SMSR3, Lp3_cal, KINK) |> 
  mutate(KINK = abs(KINK),
         KINK = ifelse(KINK>10000, 10000, KINK)) |>
  pivot_longer(
    cols = everything()
  ) |> 
  summarize(
    .by = name,
    `NA` = sum(is.na(value), na.rm = TRUE),
    outliers = sum(!isnt_outlier_tukey(value, na.rm = TRUE), na.rm = TRUE),
    mean = mean(value, na.rm = TRUE),
    sd = sd(value, na.rm = TRUE),
    quant = as_tibble_row(quantile(value, na.rm = TRUE))
  ) |> 
  unpack(quant) |> 
  rename_with(\(x) paste0("p", str_remove(x, "%")), contains("%"))

df_stats |> 
  gt(rowname_col = "name") |> 
  tab_header(
    title = "Summary Statistics",
    subtitle = paste0("N = ", nrow(df_summary), " devices")
  ) |> 
  tab_stubhead(label = "Parameter") |> 
  fmt_number(
    decimals = 0
  ) |> 
  text_replace(
    pattern = "Ith1d", replacement = "Threshold Current (mA)", locations = cells_stub()
  ) |> 
  text_replace(
    pattern = "Pf3_cal", replacement = "Output Power (mW)", locations = cells_stub()
  ) |> 
  text_replace(
    pattern = "Vf3", replacement = "Forward Voltage, (V)", locations = cells_stub()
  ) |> 
  text_replace(
    pattern = "SMSR3", replacement = "Side Mode Suppression Ratio (dB)", locations = cells_stub()
  ) |> 
  text_replace(
    pattern = "Lp3_cal", replacement = "Peak Wavelength (nm)", locations = cells_stub()
  ) |> 
  text_replace(
    pattern = "KINK", replacement = "Kink Deviation (%)", locations = cells_stub()
  ) |> 
  fmt_number(
    rows = everything(),
    columns = everything(),
    sep_mark = "",
    decimals = 0
  ) |> 
  fmt_number(
    rows = 3,
    columns = -c(1:3),
    sep_mark = ""
  )

```

## Pf

```{r}
#| label: pf3-cal
#| eval: true

df_summary |> 
  ggplot(aes(x = Pf3_cal)) +
  # ggplot(aes(x = Pf3_cal)) +
  stat_ecdf(pad = FALSE) +
  geom_vline(xintercept = Pf3_min, color = "red") +
  annotate(
    geom = "segment", x = Pf3_min, xend = Pf3_min + 5, y = 0, yend = 0,
    color = "red", arrow = arrow(length = unit(.02, "npc"), , type = "closed")
  ) +
  scale_x_continuous(breaks = seq(0, 200, 10)) +
  labs(
    title = "[Calibrated] Output Power Distribution, 400mA, 50C",
    subtitle = "panels by wafer ID",
    x = "Pf (mW)",
    color = "Lot ID",
    caption = paste("cal factor of", CAL_FACTOR_Pf3, "applied to power")
  ) +
  facet_wrap( ~ waferID)

```

## Ith

```{r}
#| label: ith
#| eval: true

df_summary |> 
  # filter(Pf3_cal > 1) |> 
  ggplot(aes(x = Ith1d)) +
  stat_ecdf(aes(x = Ith1d), pad = FALSE, na.rm = TRUE) +
  geom_vline(xintercept = Ith_max, color = "red") +
  annotate(
    geom = "segment", x = Ith_max, xend = Ith_max - 3, y = 0, yend = 0,
    color = "red", arrow = arrow(length = unit(.02, "npc"), , type = "closed")
  ) +
  coord_cartesian(xlim = c(0, 50)) +
  scale_x_continuous(breaks = seq(0, 200, 10)) +
  labs(
    title = "Threshold Current Distribution, 50C",
    subtitle = "panels by wafer ID",
    x = "Ith (mA)",
    # color = "Lot ID"
  ) +
  facet_wrap( ~ waferID)

```

## Vf

```{r}
#| label: vf3
#| eval: true

df_summary |> 
  ggplot(aes(x = Vf3)) +
  stat_ecdf(pad = FALSE) +
  geom_vline(xintercept = c(Vf3_min, Vf3_max), color = "red") +
  annotate(
    geom = "segment", x = Vf3_max, xend = Vf3_min, y = 0, yend = 0,
    color = "red", arrow = arrow(length = unit(.02, "npc"), type = "closed", ends = "both")
  ) +
  # annotate(
  #   geom = "segment", x = Vf3_min, xend = Vf3_min + 0.1, y = 0, yend = 0,
  #   color = "red", arrow = arrow(length = unit(.02, "npc"), type = "closed")
  # ) +
  coord_cartesian(xlim = c(0, 3)) +
  # scale_x_continuous(breaks = seq(0, 200, 10)) +
  labs(
    title = "Forward Voltage Distribution, 400mA, 50C",
    subtitle = "panels by wafer ID",
    x = "Vf (V)",
    color = "Lot ID"
  ) +
  facet_wrap( ~ waferID)

```

```{=html}
<!--
## Rs
-->
```
```{r}
#| label: rs3
#| eval: false

df_summary |> 
  ggplot(aes(x = Rs3)) +
  stat_ecdf(pad = FALSE) +
  # geom_vline(xintercept = c(Vf3_min, Vf3_max), color = "red") +
  # annotate(
  #   geom = "segment", x = Vf3_max, xend = Vf3_min, y = 0, yend = 0,
  #   color = "red", arrow = arrow(length = unit(.02, "npc"), type = "closed")
  # ) +
  # annotate(
  #   geom = "segment", x = Vf3_min, xend = Vf3_min + 0.1, y = 0, yend = 0,
  #   color = "red", arrow = arrow(length = unit(.02, "npc"), type = "closed")
  # ) +
  coord_cartesian(xlim = c(0, 3)) +
  # scale_x_continuous(breaks = seq(0, 200, 10)) +
  labs(
    title = "Series Resistance Distribution, 400mA, 50C",
    subtitle = "panels by wafer ID",
    x = "Rs (Ω)",
    color = "Lot ID"
  ) +
  facet_wrap( ~ waferID)

```

## SMSR

```{r}
#| label: SMSR3
#| eval: true

df_summary |> 
  ggplot(aes(x = SMSR3)) +
  stat_ecdf(pad = FALSE, na.rm = TRUE) +
  geom_vline(xintercept = SMSR3_min, color = "red") +
  annotate(
    geom = "segment", x = SMSR3_min, xend = SMSR3_min + 2.5, y = 0, yend = 0,
    color = "red", arrow = arrow(length = unit(.02, "npc"), type = "closed")
  ) +
  labs(
    title = "Side Mode Suppresion Ratio, 400mA, 50C",
    subtitle = "panels by wafer ID",
    x = "SMSR (dB)",
    color = "Lot ID"
  ) +
  facet_wrap( ~ waferID)

```

## Peak WL

```{r}
#| label: Lp3
#| eval: true

df_summary |> 
  filter(SMSR3 > 35) |> 
  # ggplot(aes(x = Lp3_cal, color = as.factor(lotID))) +
  ggplot(aes(x = Lp3_cal)) +
  # geom_rect(
  #   data = df_wl_info |> filter(CH != -1),
  #   mapping = aes(xmin = WL_min, xmax = WL_max, ymin = 0, ymax = 1, fill = as.factor(CH)),
  #   inherit.aes = FALSE,
  #   alpha = 0.5,
  #   color = "black",
  #   linewidth = 0.2) +
  stat_ecdf(pad = FALSE) +
  # geom_vline(xintercept = c(1572.06, 1575.37, 1578.69, 1582.02), color = "gray60") +
  
  coord_cartesian(xlim = c(1565, 1585)) +
  scale_x_continuous(breaks = seq(0, 2000, 5)) +
  labs(
    title = "[Calibrated] Peak Wavelength, 400mA, 50C",
    subtitle = "panels by wafer ID",
    caption = paste("cal offset of", CAL_OFFSET_Lp3, "nm applied to Lp3", "\nscreened for SMSR > 35dB"),
    x = "Lp (nm)",
    fill = "Channel"
  ) +
  facet_wrap( ~ waferID)

```

## Kink

```{r}
#| label: kink
#| eval: true

df_summary |> 
  # filter(abs(KINK) > 30) |> 
  filter(Pf3 > 1) |> 
  ggplot(aes(x = abs(KINK))) +
  stat_ecdf(pad = FALSE) +
  geom_vline(xintercept = 30, color = "red") +
  annotate(
    geom = "segment", x = kink_max, xend = kink_max - 10, y = 0, yend = 0,
    color = "red", arrow = arrow(length = unit(.02, "npc"), type = "closed")
  ) +
  coord_cartesian(xlim = c(0, 200)) +
  # scale_x_continuous(breaks = seq(-1000, 1000, 20)) +
  labs(
    title = "Kink Deviation, 250-450mA, 50C",
    subtitle = "panels by wafer ID",
    caption = "screened for Pf3 > 1mW",
    x = "|Kink| (%)",
    color = "Bar ID"
  ) +
  facet_wrap( ~ waferID)

```

# Wafer Maps

## Lot ID

```{r}
#| label: map-lotID

df_summary |> 
  ggplot(aes(xmin = die_x_coord, xmax = die_x_coord + DIE_WIDTH, ymin = die_y_coord, ymax = die_y_coord + DIE_LENGTH)) +
  geom_rect(aes(fill = as.factor(lotID)), color = "white", linewidth = 0, na.rm = TRUE) +
  geom_path(
    data = circ_dat,
    mapping = aes(x = x, y = y),
    inherit.aes = FALSE,
    color = "gray"
  ) +
  coord_equal(xlim = c(-75000/2, 75000/2)) +
  facet_wrap(~ waferID) +
  # scale_fill_viridis_d(direction = 1, option = "plasma") +
  theme(panel.grid = element_blank()) +
  labs(
    title = "Map of Tested Chips",
    subtitle = "panels by wafer ID",
    fill = "Lot ID"
  )

```

## Cell ID

```{r}
#| label: map-cellID

df_summary |> 
  ggplot(aes(xmin = die_x_coord, xmax = die_x_coord + DIE_WIDTH, ymin = die_y_coord, ymax = die_y_coord + DIE_LENGTH)) +
  geom_rect(aes(fill = as.factor(cellID)), color = "white", linewidth = 0, na.rm = FALSE) +
  geom_path(
    data = circ_dat,
    mapping = aes(x = x, y = y),
    inherit.aes = FALSE,
    color = "gray"
  ) +
  coord_equal(xlim = c(-75000/2, 75000/2)) +
  facet_wrap( ~ waferID) +
  # scale_fill_viridis_d(direction = 1, option = "plasma") +
  # scale_fill_viridis_d() +
  theme(
    panel.grid = element_blank()
  ) +
  labs(
    title = "Map of Tested Chips",
    fill = "Cell ID"
  ) +
  guides(fill=guide_legend(ncol=2))

```

## Pass / Fail

```{r}
#| label: map-pf

df_summary |> 
  ggplot(aes(xmin = die_x_coord, xmax = die_x_coord + DIE_WIDTH, ymin = die_y_coord, ymax = die_y_coord + DIE_LENGTH)) +
  geom_rect(aes(fill = pf_final), color = "white", linewidth = 0, na.rm = TRUE) +
  geom_path(
    data = circ_dat,
    mapping = aes(x = x, y = y),
    inherit.aes = FALSE,
    color = "gray"
  ) +
  coord_equal(xlim = c(-75000/2, 75000/2)) +
  facet_wrap(~ waferID) +
  # scale_fill_viridis_d(direction = 1, option = "plasma") +
  theme(panel.grid = element_blank()) +
  labs(
    title = "Map PF Result",
    subtitle = "panels by wafer ID",
    fill = "PF Final"
  )

```

## Ith

```{r}
#| label: map-ith

df_summary |> 
  # filter(Pf3_cal > 10) |> 
  ggplot(aes(xmin = die_x_coord, xmax = die_x_coord + DIE_WIDTH, ymin = die_y_coord, ymax = die_y_coord + DIE_LENGTH)) +
  geom_rect(aes(fill = Ith1d),color = "white",linewidth = 0,na.rm = TRUE) +
  geom_path(
    data = circ_dat,
    mapping = aes(x = x, y = y),
    inherit.aes = FALSE,
    color = "gray"
  ) +
  coord_equal(xlim = c(-75000/2, 75000/2)) +
  facet_wrap( ~ waferID) +
  scale_fill_viridis_c(direction = -1, option = "plasma", oob = scales::squish, limits = c(10, 20)) +
  labs(title = "Threshold Current, 50C")

```

## Pf

```{r}
df_summary |> 
  ggplot(aes(xmin = die_x_coord, xmax = die_x_coord + DIE_WIDTH, ymin = die_y_coord, ymax = die_y_coord + DIE_LENGTH)) +
  geom_rect(aes(fill = Pf3_cal),color = "white",linewidth = 0,na.rm = TRUE) +
  geom_path(
    data = circ_dat,
    mapping = aes(x = x, y = y),
    inherit.aes = FALSE,
    color = "gray"
  ) +
  coord_equal(xlim = c(-75000/2, 75000/2)) +
  facet_wrap( ~ waferID) +
  scale_fill_viridis_c(direction = 1, option = "plasma") + #, oob = scales::squish, limits = c(80, 90)) +
  labs(title = "[Calibrated] Output Power, 400mA, 50C")

```

## Vf

```{r}
df_summary |> 
  ggplot(aes(xmin = die_x_coord, xmax = die_x_coord + DIE_WIDTH, ymin = die_y_coord, ymax = die_y_coord + DIE_LENGTH)) +
  geom_rect(aes(fill = Vf3), color = "white",linewidth = 0) +
  geom_path(
    data = circ_dat,
    mapping = aes(x = x, y = y),
    inherit.aes = FALSE,
    color = "gray"
  ) +
  coord_equal(xlim = c(-75000/2, 75000/2)) +
  facet_wrap( ~ waferID) +
  scale_fill_viridis_c(direction = 1, option = "plasma", oob = scales::squish, limits = c(1, 2.0)) +
  labs(title = "Forward Voltage, 400mA, 50C")

```

## Peak WL

```{r}
df_summary |> 
  filter(SMSR3 > 35) |>
  ggplot(aes(xmin = die_x_coord, xmax = die_x_coord + DIE_WIDTH, ymin = die_y_coord, ymax = die_y_coord + DIE_LENGTH)) +
  geom_rect(aes(fill = Lp3_cal - CWL), color = "white", linewidth = 0) +
  geom_path(
    data = circ_dat,
    mapping = aes(x = x, y = y),
    inherit.aes = FALSE,
    color = "gray"
  ) +
  coord_equal(xlim = c(-75000/2, 75000/2)) +
  facet_wrap( ~ waferID) +
  scale_fill_viridis_c(direction = 1, option = "plasma") +#, oob = scales::squish, limits = c(1565, 1585))
  labs(title = "[Calibrated] Relative Wavelength, 400mA, 50C",
       caption = "screened for SMSR > 35dB")

```

## SMSR

```{r}
#| warning: true

df_summary |> 
  # filter(!is.na(SMSR3)) |>
  ggplot(aes(xmin = die_x_coord, xmax = die_x_coord + DIE_WIDTH, ymin = die_y_coord, ymax = die_y_coord + DIE_LENGTH)) +
  geom_rect(aes(fill = SMSR3), color = "white", linewidth = 0, na.rm = FALSE) +
  geom_path(
    data = circ_dat,
    mapping = aes(x = x, y = y),
    inherit.aes = FALSE,
    color = "gray"
  ) +
  coord_equal(xlim = c(-75000/2, 75000/2)) +
  facet_wrap( ~ waferID) +
  scale_fill_viridis_c(direction = 1, option = "plasma", oob = scales::squish) +
  labs(title = "SMSR, 400mA, 50C")

```
