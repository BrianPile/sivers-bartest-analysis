
```{r}
#| label: setup
#| include: false

# TODO: add series resistance

# load packages
library(tidyverse)
library(devparext)
library(gt)

# set ggplot2 theme
theme_set(theme_bw())

# source EEVEE mask decoder
source("/Users/brianpile/POET Technologies Dropbox/Brian Pile/Brian Pile/R_scripts/POET LD maskset decoders/decode_eevee.R")

# source config file
source("./config_info.R")

# calibration constants
# TODO: put calibration constants inside config file?
CAL_FACTOR_Pf3 = 0.7
CAL_OFFSET_Lp3 = -3.578

# ELS wavelength plan
# TODO: can use cut function instead to do this?
df_wl_info = tribble(
  ~CH,     ~WL_min,     ~WL_max,
  0,       1566.77,     1570.0599999,
  1,       1570.06,     1573.3699999,
  2,       1573.37,     1576.6899999,
  3,       1576.69,     1580.0199999,
  4,       1580.02,     1583.34
)

# die geometry
DIE_WIDTH = 250
DIE_LENGTH = 950

# data for a circle
circleFun <- function(center = c(0,0), diameter = 1, npoints = 100){
    r = diameter / 2
    tt <- seq(0,2*pi,length.out = npoints)
    xx <- center[1] + r * cos(tt)
    yy <- center[2] + r * sin(tt)
    return(data.frame(x = xx, y = yy))
}
circ_dat = circleFun(diameter = 75000)
```

```{r}
#| label: load-data
#| eval: true

# df_liv = data.table::fread(file = "./data/P10515_combined_LIV.csv") |>
#   # separate_wider_delim(SN, delim = "-", names = c("waferID", "cellID", "barID", "dieID"), cols_remove = FALSE)
#   tidyfast::dt_separate(
#     col = SN,
#     into = c("waferID", "cellID", "barID", "dieID"),
#     sep = "-",
#     remove = FALSE
#   )

# df_osa = data.table::fread(file = "./data/P10515_combined_OSA.csv")

df_summary = data.table::fread(file = paste0("./data/", config_info$lotID, "_summary.csv")) |> 
  as_tibble() |> 
  mutate(Pf3_cal = Pf3 * CAL_FACTOR_Pf3, .after = Pf3) |> 
  mutate(Lp3_cal = Lp3 + CAL_OFFSET_Lp3, .after = Lp3) |> 
  mutate(
    cellID = as.character(cellID),
    barID = as.character(barID)
  ) |>
  decode_eevee()

# df_summary = df_summary |> filter(!is.na(Lp3)) # TODO: FIGURE OUT WHY this is even needed, why is NA happening???
```

# Overview

## Process History

| Process                                             | Supplier | Comment                                          |
|--------------------------------|-------------|---------------------------|
| Epi wafer and fabrication up until z-stop           | Almae    | Phase-3 lot of three wafers                      |
| Wafer thinning and patterned backside metallization | Sivers   | Used Sivers own labeling characters and sequence |
| Cleaving, facet coating, and bar testing            | Sivers   | non-hermetic coatings                            |

## Known Issues

The following items regarding the wafer history should be noted.

1.  An oversight in the EEVEE mask design caused poor cleaving quality. Thick p-metal is located in the cleave streets resulting in irregular facets and also metal wrapping over the die edge into the facet region. This oversight caused significant processing challenges at both Almae and Sivers resulting in delays and unknown yield and reliability consequences. The mask has been revised to correct the issue.

2.  The wavelengths are blue-shifted from the design targets by about -3.5nm. This corresponds to a offset of approximately one channel in the intended 4-channel application. The impact to yield is that there are effectively no channel 4 devices available. A new bin for a channel 0 was created in order to harvest these die anyway.

## Calibration

The raw output power and wavelength data was calibrated based on previous comparison of POET CoC, Almae CoC, and Sivers bar test data. A calibration factor of `r CAL_FACTOR_Pf3` was applied to the output power at 400mA, and a calibration offset of `r CAL_OFFSET_Lp3`mW was added to the wavelength at 400mA. All analysis in this report is based on the calibrated data unless specifically noted otherwise.

# Yield

```{r}
#| label: yield-calculation

# pass criteria
# TODO: put pass criteria inside config file?
Ith_max = 25L
Pf3_min = 80L
# Vf3_max = 2.0
Vf3_max = 2.5  # making exception because CoC voltage looked normal and this crushes the yield otherwise
Vf3_min = 1.3
SMSR3_min = 35L
# Lp3_min = 1570.06
Lp3_min = 1566.77 # assumes creating a CH0 is acceptable, normally this should be 1570.06
Lp3_max = 1583.34
kink_max = 30L

# pass/fail evaluation
df_summary = df_summary |>
  mutate(
    pf_Pf3 = case_when(
      Pf3_cal >= Pf3_min ~ TRUE,
      .default = FALSE
    ),
    pf_Ith = case_when(
      Ith1d <= Ith_max ~ TRUE,
      .default = FALSE
    ),
    # pf_Pf3 = case_when(
    #   Pf3_cal >= Pf3_min ~ TRUE,
    #   .default = FALSE
    # ),
    pf_Vf3 = case_when(
      between(Vf3, Vf3_min, Vf3_max) ~ TRUE,
      .default = FALSE
    ),
    pf_SMSR3 = case_when(
      SMSR3 >= SMSR3_min ~ TRUE,
      .default = FALSE
    ),
    pf_Lp3 = case_when(
      between(Lp3_cal, Lp3_min, Lp3_max) ~ TRUE,
      .default = FALSE
    ),
    pf_kink = case_when(
      abs(KINK) <= kink_max ~ TRUE,
      .default = FALSE
    ),
    pf_final = case_when(
      pf_Pf3 & pf_Vf3 & pf_Ith & pf_kink & pf_SMSR3 & pf_Lp3 ~ TRUE,
      .default = FALSE
    )
  )

# assign pass/fail codes
df_summary = df_summary |> 
  mutate(
    pf_code = case_when(
      pf_Pf3   == FALSE ~ "Pf",
      pf_Ith   == FALSE ~ "Ith",
      pf_Vf3   == FALSE ~ "Vf",
      pf_SMSR3 == FALSE ~ "SMSR",
      pf_Lp3   == FALSE ~ "Lp",
      pf_kink  == FALSE ~ "kink",
      pf_final == TRUE ~ "PASS",
      .default = "?"
    )
  )

# wavelength binning
df_summary = df_summary |> 
  mutate(WL_bin = case_when(
    Lp3_cal < df_wl_info[[1, "WL_min"]] ~ "too low",
    between(Lp3_cal, df_wl_info[[1, "WL_min"]], df_wl_info[[1, "WL_max"]]) ~ "0",
    between(Lp3_cal, df_wl_info[[2, "WL_min"]], df_wl_info[[2, "WL_max"]]) ~ "1",
    between(Lp3_cal, df_wl_info[[3, "WL_min"]], df_wl_info[[3, "WL_max"]]) ~ "2",
    between(Lp3_cal, df_wl_info[[4, "WL_min"]], df_wl_info[[4, "WL_max"]]) ~ "3",
    between(Lp3_cal, df_wl_info[[5, "WL_min"]], df_wl_info[[5, "WL_max"]]) ~ "4",
    Lp3_cal > df_wl_info[[4, "WL_max"]] ~ "too high",
    .default = NA
  ))

# calculate individual parameter yields
df_yield = df_summary |> 
  group_by(waferID) |>
  summarize(
    n = n(),
    Pf3_fail_count = sum(!pf_Pf3),
    Pf3_yield_pct = round(100*(1 - Pf3_fail_count/n), 1),
    Vf3_fail_count = sum(!pf_Vf3),
    Vf3_yield_pct = round(100 * (1 - Vf3_fail_count/n), 1),
    Ith_fail_count = sum(!pf_Ith),
    Ith_yield_pct = round(100 * (1 - Ith_fail_count/n), 1),
    kink_fail_count = sum(!pf_kink),
    kink_yield_pct = round(100 * (1 - kink_fail_count/n), 1),
    SMSR3_fail_count = sum(!pf_SMSR3),
    SMSR3_yield_pct = round(100 * (1 - SMSR3_fail_count/n), 1),
    Lp3_fail_count = sum(!pf_Lp3),
    Lp3_yield_pct = round(100 * (1 - Lp3_fail_count/n), 1),
    fail_count = sum(!pf_final),
    total_pass_count = sum(pf_final),
    total_yield_pct = round(100 * (1 - fail_count/n), 1)
  )
```

## summary

```{r}
#| label: yield-summary-table

# yield summary table
df_yield |> 
  select(waferID, n, fail_count, total_pass_count, total_yield_pct) |> 
  gt() |> 
  tab_header(
    title = "Yield Summary",
    subtitle = paste("Lot", config_info$lotID)
  ) |> 
  tab_stubhead(label = "Lot ID") |> 
  cols_label(
    waferID = "Wafer ID",
    fail_count = "Fail Count",
    total_pass_count = "Pass Count",
    total_yield_pct = "Yield (%)"
  ) |> 
  tab_options(
    table.width = pct(80)
  )
```

```{r}
#| label: channel-yield

df_summary |> 
  filter(pf_final) |> 
  summarize(
    .by = c(waferID, WL_bin),
    n = n()
  ) |> 
  filter(WL_bin %in% as.character(0:4)) |> 
  arrange(WL_bin) |> 
  pivot_wider(
    names_from = WL_bin,
    values_from = n,
    names_prefix = "CH"
  ) |> 
  gt() |> 
  tab_header(
    title = "Yielded Die Per Channel",
    subtitle = paste("Lot", config_info$lotID)
  ) |> 
  cols_label(
    waferID = "Wafer ID"
  ) |> 
  tab_options(
    table.width = pct(80)
  )
```

## pass criteria

```{r}
pf_criteria = tribble(
  ~no,  ~Parameter,                     ~Symbol,  ~Unit,   ~Minimum,     ~Maximum,
  1,    "Output Power",                 "Pf",     "mW",    Pf3_min,      NA,
  2,    "Threshold Current",            "Ith",    "mA",    NA,           Ith_max,
  3,    "Forward Voltage",              "Vf",     "V",     Vf3_min,      Vf3_max,
  4,    "Side Mode Suppression Ratio",  "SMSR",   "dB",    SMSR3_min,    NA,
  5,    "Peak Wavelength",              "Lp",     "nm",    Lp3_min,      Lp3_max,
  6,    "Kink Deviation",               "Kink",   "%",     NA,           kink_max
)

pf_criteria |>
  gt() |> 
  tab_header(
    title = "Pass Criteria",
    subtitle = "L-I-V and spectrum are measured using pulsed and CW current, respectively."
  ) |> 
  sub_missing(
    columns = everything(),
    rows = everything(),
    missing_text = ""
  ) |> 
  cols_width(
    no ~ px(10),
  ) |>
  fmt_number(
    rows = c(3, 5),
    columns = -1,
    decimals = 2,
    use_seps = FALSE
  ) |> 
  tab_options(
    table.width = pct(80)
  )
```

## pass rates

```{r}
#| label: pass-rates

df_yield |> 
  pivot_longer(-c(waferID, n)) |> 
  filter(str_detect(name, "pct")) |> 
  mutate(name = str_remove(name, "_yield_pct")) |> 
  ggplot(aes(x = fct_reorder(name, value, .desc = TRUE), y = value)) +
  geom_col() +
  geom_text(
    aes(label = paste0(round(value, 0), "%")),
    vjust = -0.5
  ) +
  coord_cartesian(ylim = c(0, 100)) +
  labs(
    title = "Percent of Chips Passing by Criteria Type",
    x = "Parameter",
    y = "(%)"
  )
```

## failure Pareto

```{r}
#| label: failure-pareto

d = df_summary |> 
  summarize(
    .by = c(pf_code),
    n = n()
  ) |> 
  mutate(pcnt = 100 * n/sum(n))


d |> 
  filter(pf_code != "PASS") |>
  ggplot(aes(x = fct_reorder(pf_code, pcnt, .desc = TRUE), y = pcnt)) +
  geom_col() +
  geom_text(aes(label = paste0(round(pcnt), "%")), vjust = -0.5) +
  coord_cartesian(ylim = c(0, 50)) +
  labs(
    title = "Percentage by First-Failed Criteria",
    x = "Parameter",
    y = "(%)"
  )
```

```{r}
#| label: wl-bin-tally
#| eval: false

df_summary |> 
  # filter(pf_final == TRUE) |>
  filter(SMSR3 >= 35) |> 
  summarize(
    .by = WL_bin,
    n = n()
  ) |> 
  ggplot(aes(x = WL_bin, y = n)) +
  geom_col() +
  geom_text(aes(label = n), vjust = -0.5) +
  coord_cartesian(ylim = c(0, 2000)) +
  labs(
    title = "Wavelength Bin Counts",
    x = "Channel"
  )
```

# Parametric Data

## Summary

```{r}
#| label: summary-stats

df_stats = df_summary |> 
  as_tibble() |> 
  select(Ith1d, Pf3_cal, Vf3, SMSR3, Lp3_cal, KINK) |> 
  mutate(KINK = abs(KINK),
         KINK = ifelse(KINK>10000, 10000, KINK)) |> 
  summarize(
    `NA`       = across(c(Pf3_cal, Ith1d, Vf3, SMSR3, Lp3_cal, KINK), \(x) sum(is.na(x), na.rm = TRUE)),
    Outliers   = across(c(Pf3_cal, Ith1d, Vf3, SMSR3, Lp3_cal, KINK), \(x) sum(!isnt_outlier_tukey(x, na.rm = TRUE), na.rm = TRUE)),
    Min        = across(c(Pf3_cal, Ith1d, Vf3, SMSR3, Lp3_cal, KINK), \(x) min(x, na.rm = TRUE)),
    Q1         = across(c(Pf3_cal, Ith1d, Vf3, SMSR3, Lp3_cal, KINK), \(x) quantile(x, probs = 0.25, na.rm = TRUE)),
    Med        = across(c(Pf3_cal, Ith1d, Vf3, SMSR3, Lp3_cal, KINK), \(x) median(x, na.rm = TRUE)),
    Avg        = across(c(Pf3_cal, Ith1d, Vf3, SMSR3, Lp3_cal, KINK), \(x) mean(x, na.rm = TRUE)),
    Q3         = across(c(Pf3_cal, Ith1d, Vf3, SMSR3, Lp3_cal, KINK), \(x) quantile(x, probs = 0.75, na.rm = TRUE)),
    Max        = across(c(Pf3_cal, Ith1d, Vf3, SMSR3, Lp3_cal, KINK), \(x) max(x, na.rm = TRUE)),
    IQR        = across(c(Pf3_cal, Ith1d, Vf3, SMSR3, Lp3_cal, KINK), \(x) diff(quantile(x, probs = c(0.25, 0.75), na.rm = TRUE))),
  ) |> 
  unnest(everything(), names_sep = "-") |> 
  pivot_longer(
    cols = everything(),
    names_to = c(".value", "Parameter"),
    names_sep = "-",
  )

df_stats |> 
  gt(rowname_col = "Parameter") |> 
  tab_header(
    title = "Summary Statistics",
    subtitle = paste0("N = ", nrow(df_summary), " devices")
  ) |> 
  tab_stubhead(label = "Parameter") |> 
  fmt_number(
    decimals = 0
  ) |> 
  text_replace(
    pattern = "Ith1d", replacement = "Threshold Current (mA)", locations = cells_stub()
  ) |> 
  text_replace(
    pattern = "Pf3_cal", replacement = "Output Power (mW)", locations = cells_stub()
  ) |> 
  text_replace(
    pattern = "Vf3", replacement = "Forward Voltage, (V)", locations = cells_stub()
  ) |> 
  text_replace(
    pattern = "SMSR3", replacement = "Side Mode Suppression Ratio (dB)", locations = cells_stub()
  ) |> 
  text_replace(
    pattern = "Lp3_cal", replacement = "Peak Wavelength (nm)", locations = cells_stub()
  ) |> 
  text_replace(
    pattern = "KINK", replacement = "Kink Deviation (%)", locations = cells_stub()
  ) |> 
  fmt_number(
    rows = everything(),
    columns = everything(),
    sep_mark = "",
    decimals = 0
  ) |> 
  fmt_number(
    rows = 3,
    columns = -c(1:3),
    sep_mark = ""
  )
```

## Pf

```{r}
#| label: pf3-cal
#| eval: true

df_summary |> 
  ggplot(aes(x = Pf3_cal)) +
  # ggplot(aes(x = Pf3_cal)) +
  stat_ecdf(pad = FALSE) +
  geom_vline(xintercept = Pf3_min, color = "red") +
  annotate(
    geom = "segment", x = Pf3_min, xend = Pf3_min + 5, y = 0, yend = 0,
    color = "red", arrow = arrow(length = unit(.02, "npc"), , type = "closed")
  ) +
  scale_x_continuous(breaks = seq(0, 200, 10)) +
  labs(
    title = "[Calibrated] Output Power Distribution, 400mA, 50C",
    subtitle = "panels by wafer ID",
    x = "Pf (mW)",
    color = "Lot ID",
    caption = paste("cal factor of", CAL_FACTOR_Pf3, "applied to power")
  ) +
  facet_wrap( ~ waferID)
```

## Ith

```{r}
#| label: ith
#| eval: true

df_summary |> 
  # filter(Pf3_cal > 1) |> 
  ggplot(aes(x = Ith1d)) +
  stat_ecdf(aes(x = Ith1d), pad = FALSE, na.rm = TRUE) +
  geom_vline(xintercept = Ith_max, color = "red") +
  annotate(
    geom = "segment", x = Ith_max, xend = Ith_max - 3, y = 0, yend = 0,
    color = "red", arrow = arrow(length = unit(.02, "npc"), , type = "closed")
  ) +
  coord_cartesian(xlim = c(0, 50)) +
  scale_x_continuous(breaks = seq(0, 200, 10)) +
  labs(
    title = "Threshold Current, 50C",
    subtitle = "panels by wafer ID",
    x = "Ith (mA)",
    # color = "Lot ID"
  ) +
  facet_wrap( ~ waferID)
```

## Vf

```{r}
#| label: vf3
#| eval: true

df_summary |> 
  ggplot(aes(x = Vf3)) +
  stat_ecdf(pad = FALSE) +
  geom_vline(xintercept = c(Vf3_min, Vf3_max), color = "red") +
  annotate(
    geom = "segment", x = Vf3_max, xend = Vf3_min, y = 0, yend = 0,
    color = "red", arrow = arrow(length = unit(.02, "npc"), type = "closed", ends = "both")
  ) +
  # annotate(
  #   geom = "segment", x = Vf3_min, xend = Vf3_min + 0.1, y = 0, yend = 0,
  #   color = "red", arrow = arrow(length = unit(.02, "npc"), type = "closed")
  # ) +
  coord_cartesian(xlim = c(0, 3)) +
  # scale_x_continuous(breaks = seq(0, 200, 10)) +
  labs(
    title = "Forward Voltage Distribution, 400mA, 50C",
    subtitle = "panels by wafer ID",
    x = "Vf (V)",
    color = "Lot ID"
  ) +
  facet_wrap( ~ waferID)
```

```{=html}
<!--
## Rs
-->
```
```{r}
#| label: rs3
#| eval: false

df_summary |> 
  ggplot(aes(x = Rs3)) +
  stat_ecdf(pad = FALSE) +
  # geom_vline(xintercept = c(Vf3_min, Vf3_max), color = "red") +
  # annotate(
  #   geom = "segment", x = Vf3_max, xend = Vf3_min, y = 0, yend = 0,
  #   color = "red", arrow = arrow(length = unit(.02, "npc"), type = "closed")
  # ) +
  # annotate(
  #   geom = "segment", x = Vf3_min, xend = Vf3_min + 0.1, y = 0, yend = 0,
  #   color = "red", arrow = arrow(length = unit(.02, "npc"), type = "closed")
  # ) +
  coord_cartesian(xlim = c(0, 3)) +
  # scale_x_continuous(breaks = seq(0, 200, 10)) +
  labs(
    title = "Series Resistance Distribution, 400mA, 50C",
    subtitle = "panels by wafer ID",
    x = "Rs (Ω)",
    color = "Lot ID"
  ) +
  facet_wrap( ~ waferID)
```

## SMSR

```{r}
#| label: SMSR3
#| eval: true

df_summary |> 
  ggplot(aes(x = SMSR3)) +
  stat_ecdf(pad = FALSE, na.rm = TRUE) +
  geom_vline(xintercept = 35, color = "red") +
  annotate(
    geom = "segment", x = SMSR3_min, xend = SMSR3_min + 2.5, y = 0, yend = 0,
    color = "red", arrow = arrow(length = unit(.02, "npc"), type = "closed")
  ) +
  labs(
    title = "Side Mode Suppresion Ratio, 400mA, 50C",
    subtitle = "panels by wafer ID",
    x = "SMSR (dB)",
    color = "Lot ID"
  ) +
  facet_wrap( ~ waferID)
```

## Peak WL

```{r}
#| label: Lp3
#| eval: true

df_summary |> 
  filter(SMSR3 > 35) |> 
  # ggplot(aes(x = Lp3_cal, color = as.factor(lotID))) +
  ggplot(aes(x = Lp3_cal)) +
  geom_rect(
    data = df_wl_info |> filter(CH != -1),
    mapping = aes(xmin = WL_min, xmax = WL_max, ymin = 0, ymax = 1, fill = as.factor(CH)),
    inherit.aes = FALSE,
    alpha = 0.5,
    color = "black",
    linewidth = 0.2) +
  stat_ecdf(pad = FALSE) +
  # geom_vline(xintercept = c(1572.06, 1575.37, 1578.69, 1582.02), color = "gray60") +
  
  coord_cartesian(xlim = c(1565, 1585)) +
  scale_x_continuous(breaks = seq(0, 2000, 5)) +
  labs(
    title = "[Calibrated] Peak Wavelength, 400mA, 50C",
    subtitle = "panels by wafer ID",
    caption = paste("cal offset of", CAL_OFFSET_Lp3, "nm applied to Lp3", "\nscreened for SMSR > 35dB"),
    x = "Lp (nm)",
    fill = "Channel"
  ) +
  facet_wrap( ~ waferID)
```

## Kink

```{r}
#| label: kink
#| eval: true

df_summary |> 
  # filter(abs(KINK) > 30) |> 
  filter(Pf3 > 1) |> 
  ggplot(aes(x = abs(KINK))) +
  stat_ecdf(pad = FALSE) +
  geom_vline(xintercept = 30, color = "red") +
  annotate(
    geom = "segment", x = kink_max, xend = kink_max - 10, y = 0, yend = 0,
    color = "red", arrow = arrow(length = unit(.02, "npc"), type = "closed")
  ) +
  coord_cartesian(xlim = c(0, 200)) +
  # scale_x_continuous(breaks = seq(-1000, 1000, 20)) +
  labs(
    title = "Kink Deviation, 250-450mA, 50C",
    subtitle = "panels by wafer ID",
    caption = "screened for Pf3 > 1mW",
    x = "|Kink| (%)",
    color = "Bar ID"
  ) +
  facet_wrap( ~ waferID)
```

# Wafer Maps

## Lot ID

```{r}
#| label: map-lotID

df_summary |> 
  ggplot(aes(xmin = die_x_coord, xmax = die_x_coord + DIE_WIDTH, ymin = die_y_coord, ymax = die_y_coord + DIE_LENGTH)) +
  geom_rect(aes(fill = as.factor(lotID)), color = "white", linewidth = 0, na.rm = TRUE) +
  geom_path(
    data = circ_dat,
    mapping = aes(x = x, y = y),
    inherit.aes = FALSE,
    color = "gray"
  ) +
  coord_equal(xlim = c(-75000/2, 75000/2)) +
  facet_wrap(~ waferID) +
  # scale_fill_viridis_d(direction = 1, option = "plasma") +
  theme(panel.grid = element_blank()) +
  labs(
    title = "Map of Tested Chips",
    subtitle = "panels by wafer ID",
    fill = "Lot ID"
  )
```

## Cell ID

```{r}
#| label: map-cellID

df_summary |> 
  ggplot(aes(xmin = die_x_coord, xmax = die_x_coord + DIE_WIDTH, ymin = die_y_coord, ymax = die_y_coord + DIE_LENGTH)) +
  geom_rect(aes(fill = as.factor(cellID)), color = "white", linewidth = 0, na.rm = FALSE) +
  geom_path(
    data = circ_dat,
    mapping = aes(x = x, y = y),
    inherit.aes = FALSE,
    color = "gray"
  ) +
  coord_equal(xlim = c(-75000/2, 75000/2)) +
  facet_wrap( ~ waferID) +
  # scale_fill_viridis_d(direction = 1, option = "plasma") +
  # scale_fill_viridis_d() +
  theme(
    panel.grid = element_blank()
  ) +
  labs(
    title = "Map of Tested Chips",
    fill = "Cell ID"
  ) +
  guides(fill=guide_legend(ncol=2))
```

## Ith

```{r}
#| label: map-ith

df_summary |> 
  # filter(Pf3_cal > 10) |> 
  ggplot(aes(xmin = die_x_coord, xmax = die_x_coord + DIE_WIDTH, ymin = die_y_coord, ymax = die_y_coord + DIE_LENGTH)) +
  geom_rect(aes(fill = Ith1d),color = "white",linewidth = 0,na.rm = TRUE) +
  geom_path(
    data = circ_dat,
    mapping = aes(x = x, y = y),
    inherit.aes = FALSE,
    color = "gray"
  ) +
  coord_equal(xlim = c(-75000/2, 75000/2)) +
  facet_wrap( ~ waferID) +
  scale_fill_viridis_c(direction = -1, option = "plasma", oob = scales::squish, limits = c(10, 20)) +
  labs(title = "Threshold Current, 50C")
```

## Pf

```{r}
df_summary |> 
  ggplot(aes(xmin = die_x_coord, xmax = die_x_coord + DIE_WIDTH, ymin = die_y_coord, ymax = die_y_coord + DIE_LENGTH)) +
  geom_rect(aes(fill = Pf3_cal),color = "white",linewidth = 0,na.rm = TRUE) +
  geom_path(
    data = circ_dat,
    mapping = aes(x = x, y = y),
    inherit.aes = FALSE,
    color = "gray"
  ) +
  coord_equal(xlim = c(-75000/2, 75000/2)) +
  facet_wrap( ~ waferID) +
  scale_fill_viridis_c(direction = 1, option = "plasma") + #, oob = scales::squish, limits = c(80, 90)) +
  labs(title = "[Calibrated] Output Power, 400mA, 50C")
```

## Vf

```{r}
df_summary |> 
  ggplot(aes(xmin = die_x_coord, xmax = die_x_coord + DIE_WIDTH, ymin = die_y_coord, ymax = die_y_coord + DIE_LENGTH)) +
  geom_rect(aes(fill = Vf3), color = "white",linewidth = 0) +
  geom_path(
    data = circ_dat,
    mapping = aes(x = x, y = y),
    inherit.aes = FALSE,
    color = "gray"
  ) +
  coord_equal(xlim = c(-75000/2, 75000/2)) +
  facet_wrap( ~ waferID) +
  scale_fill_viridis_c(direction = 1, option = "plasma", oob = scales::squish, limits = c(1, 2.0)) +
  labs(title = "Forward Voltage, 400mA, 50C")
```

## Peak WL

```{r}
df_summary |> 
  filter(SMSR3 > 35) |>
  ggplot(aes(xmin = die_x_coord, xmax = die_x_coord + DIE_WIDTH, ymin = die_y_coord, ymax = die_y_coord + DIE_LENGTH)) +
  geom_rect(aes(fill = Lp3_cal - CWL), color = "white", linewidth = 0) +
  geom_path(
    data = circ_dat,
    mapping = aes(x = x, y = y),
    inherit.aes = FALSE,
    color = "gray"
  ) +
  coord_equal(xlim = c(-75000/2, 75000/2)) +
  facet_wrap( ~ waferID) +
  scale_fill_viridis_c(direction = 1, option = "plasma") +#, oob = scales::squish, limits = c(1565, 1585))
  labs(title = "[Calibrated] Relative Wavelength, 400mA, 50C",
       caption = "screened for SMSR > 35dB")
```

## SMSR

```{r}
#| warning: true

df_summary |> 
  # filter(!is.na(SMSR3)) |>
  ggplot(aes(xmin = die_x_coord, xmax = die_x_coord + DIE_WIDTH, ymin = die_y_coord, ymax = die_y_coord + DIE_LENGTH)) +
  geom_rect(aes(fill = SMSR3), color = "white", linewidth = 0, na.rm = FALSE) +
  geom_path(
    data = circ_dat,
    mapping = aes(x = x, y = y),
    inherit.aes = FALSE,
    color = "gray"
  ) +
  coord_equal(xlim = c(-75000/2, 75000/2)) +
  facet_wrap( ~ waferID) +
  scale_fill_viridis_c(direction = 1, option = "plasma", oob = scales::squish) +
  labs(title = "SMSR, 400mA, 50C")
```
